from typing import Any

import cocotb.simulator
DRIVERS: int
ENUM: int
GENARRAY: int
INTEGER: int
LOADS: int
MEMORY: int
MODULE: int
NET: int
NETARRAY: int
OBJECTS: int
REAL: int
REG: int
STRING: int
STRUCTURE: int
UNKNOWN: int

def get_precision(*args, **kwargs) -> int: ...
def get_root_handle(name: str) -> cocotb.simulator.gpi_sim_hdl: ...
def get_sim_time(*args, **kwargs) -> int: ...
def get_simulator_product(*args, **kwargs) -> str: ...
def get_simulator_version(*args, **kwargs) -> str: ...
def is_running(*args, **kwargs) -> bool: ...
def log_level(level: int) -> None: ...
def log_msg(name: str, path: str, funcname: str, lineno: int, msg: str) -> None: ...
def register_nextstep_callback(func, *args: Any) -> cocotb.simulator.gpi_cb_hdl: ...
def register_readonly_callback(func, *args: Any) -> cocotb.simulator.gpi_cb_hdl: ...
def register_rwsynch_callback(func, *args: Any) -> cocotb.simulator.gpi_cb_hdl: ...
def register_timed_callback(time: int, func, *args: Any) -> cocotb.simulator.gpi_cb_hdl: ...
def register_value_change_callback(signal: cocotb.simulator.gpi_sim_hdl, func, edge: int, *args: Any) -> cocotb.simulator.gpi_cb_hdl: ...
def stop_simulator(*args, **kwargs) -> Any: ...

class gpi_cb_hdl:
    def deregister(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

class gpi_iterator_hdl:
    def __eq__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __next__(self) -> Any: ...

class gpi_sim_hdl:
    def get_const(self, *args, **kwargs) -> Any: ...
    def get_definition_file(self, *args, **kwargs) -> Any: ...
    def get_definition_name(self, *args, **kwargs) -> Any: ...
    def get_handle_by_index(self, index: int) -> cocotb.simulator.gpi_sim_hdl: ...
    def get_handle_by_name(self, name: str) -> cocotb.simulator.gpi_sim_hdl: ...
    def get_name_string(self, *args, **kwargs) -> Any: ...
    def get_num_elems(self, *args, **kwargs) -> Any: ...
    def get_range(self, *args, **kwargs) -> Any: ...
    def get_signal_val_binstr(self, *args, **kwargs) -> str: ...
    def get_signal_val_long(self, *args, **kwargs) -> int: ...
    def get_signal_val_real(self, *args, **kwargs) -> float: ...
    def get_signal_val_str(self, *args, **kwargs) -> str: ...
    def get_type(self, *args, **kwargs) -> Any: ...
    def get_type_string(self, *args, **kwargs) -> str: ...
    def iterate(self, mode: int) -> cocotb.simulator.gpi_iterator_hdl: ...
    def set_signal_val_binstr(self, action: int, value: str) -> None: ...
    def set_signal_val_long(self, action: int, value: int) -> None: ...
    def set_signal_val_real(self, action: int, value: float) -> None: ...
    def set_signal_val_str(self, action: int, value: bytes) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
